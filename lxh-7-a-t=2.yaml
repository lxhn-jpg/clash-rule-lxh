# 注意规则在满足自己需求情况下，尽量做到精简，不要过度复杂，以免影响性能。
# 机场订阅
proxy-providers:
  provider1:
    url: "https://hongxingdl.love/hxyunvip?token=330b47fbea3adb7935df2182dfd78194"
    type: http
    interval: 3600
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: 直连
    header:
      User-Agent:
      - "Clash/v1.18.0"
      - "mihomo/1.18.3"
    override:
      udp: true
      skip-cert-verify: true
  provider2:
    url: "https://linka.lmscunb.cc:2087/api/v1/client/subscribe?token=0de34ca31e55bc4dd89c6a11b461b36e"
    type: http
    interval: 3600
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: 直连
    header:
      User-Agent:
      - "Clash/v1.18.0"
      - "mihomo/1.18.3"
    override:
      udp: true
      skip-cert-verify: true



proxy-groups: 
  - name: Proxy
    type: select
    use:
      - provider1
      - provider2
    exclude-filter: "失败|异常|官网|网址|网站|到期|截至|剩余|使用|刷新|重试"
    exclude-type: "Shadowsocks"

#自定义 geodata url
geodata-loader: stardard
geodata-mode: false
geox-url:
  geoip: "https://fastly.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@release/geoip.dat"
  geosite: "https://fastly.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@release/geosite.dat"
  mmdb: "https://fastly.jsdelivr.net/gh/MetaCubeX/meta-rules-dat@release/geoip.metadb"
  asn: "https://cdn.jsdelivr.net/gh/Loyalsoldier/geoip@release/GeoLite2-ASN.mmdb"
geo-auto-update: true # 是否自动更新 geodata
geo-update-interval: 24 # 更新间隔，单位：小时


# 全局配置 
port: 7890
socks-port: 7891
redir-port: 7892
mixed-port: 7893
tproxy-port: 7894
allow-lan: true
bind-address: "*"
ipv6: false
unified-delay: true
tcp-concurrent: true
log-level: warning
find-process-mode: 'off'
# interface-name: en0
global-client-fingerprint: chrome
keep-alive-idle: 600
keep-alive-interval: 15
disable-keep-alive: false
profile:
  store-selected: true
  store-fake-ip: true

# 控制面板
external-controller: 0.0.0.0:9090
secret: ""
external-ui: "/etc/mihomo/run/ui"
external-ui-name: zashboard
external-ui-url: "https://github.com/Zephyruso/zashboard/archive/refs/heads/gh-pages.zip"

# 嗅探
sniffer:
  enable: true
  sniff:
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true
    TLS:
      ports: [443, 8443]
    QUIC:
      ports: [443, 8443]
  force-domain:
    - "+.v2ex.com"
  skip-domain:
    - "rule-set:private_domain,cn_domain"

# 入站  
tun:
  enable: true
  # system/gvisor/mixed
  stack: mixed
  dns-hijack: ["any:53", "tcp://any:53"]
  auto-route: true
  auto-redirect: true
  auto-detect-interface: true

# DNS模块
dns:
  enable: true
  listen: 0.0.0.0:1053
  ipv6: false
  respect-rules: true
  enhanced-mode: fake-ip
  fake-ip-range: 28.0.0.1/8
  fake-ip-filter-mode: blacklist
  fake-ip-filter:
    - "rule-set:private_domain,cn_domain"
    - "+.services.googleapis.cn"
    - "+.xn--ngstr-lra8j.com"
    - "time.*.com"
    - '*.lan'
    - localhost.ptlogin2.qq.com
  nameserver-policy:
   '+.baidu.com': '114.114.114.114'
   "rule-set:privat_domain,cn_domain": '223.5.5.5'
  default-nameserver:
    - 223.5.5.5
  direct-nameserver:
    - 233.5.5.5
  direct-nameserver-follow-policy: false  
  proxy-server-nameserver:
    - https://223.5.5.5/dns-query
  # namesever尽量用运营商提供的DNS
  nameserver:
    - 223.5.5.5
    - 119.29.29.29
 
# 出站策略
# 注意锚点必须放在引用的上方，可以集中把锚点全部放yaml的顶部。
pr: &pr {type: select, proxies: [🚀 默认代理, 🔯 香港故转, 🔯 日本故转, ♻️ 香港自动, ♻️ 日本自动, ♻️ 其他自动, ♻️ 自动选择, 🇭🇰 香港节点, 🇯🇵 日本节点, 🇺🇲 美国节点, ♿ 台湾节点, 🛂 狮城节点, ⚛️ 其他节点, 🌐 全部节点, 直连]}
proxy-groups:
  - {name: 🚀 默认代理, type: select, proxies: [🔯 香港故转, 🔯 日本故转, ♻️ 香港自动, ♻️ 日本自动, ♻️ 其他自动, ♻️ 自动选择, 🇭🇰 香港节点, 🇯🇵 日本节点, 🇺🇲 美国节点, ♿ 台湾节点, 🛂 狮城节点, ⚛️ 其他节点, 🌐 全部节点, 直连]}
  - {name: 📹 YouTube, <<: *pr}
  - {name: 🍀 Google, <<: *pr}
  - {name: 🤖 ChatGPT, <<: *pr}
  - {name: 👨🏿‍💻 GitHub, type: select, proxies: [直连, 🚀 默认代理]}
  - {name: 📕 Bilibili, type: select, proxies: [直连, 🚀 默认代理]}
  - {name: 📗 Pixiv, type: select, proxies: [直连, 🚀 默认代理]}
  - {name: 📘 Spotify, type: select, proxies: [直连, 🚀 默认代理]}
  - {name: 📙 X, type: select, proxies: [直连, 🚀 默认代理]}
  - {name: 🐬 OneDrive, type: select, proxies: [直连, 🚀 默认代理]}
  - {name: 🪟 Microsoft, type: select, proxies: [直连, 🚀 默认代理]}
 #- {name: 🎵 TikTok, type: select, proxies: [直连, 🚀 默认代理]}
  - {name: 📲 Telegram, type: select, proxies: [直连, 🚀 默认代理]}
 #- {name: 🎥 NETFLIX, <<: *pr}
  - {name: ✈️ Speedtest, type: select, proxies: [直连, 🚀 默认代理]}
 #- {name: 💶 PayPal, <<: *pr}
 #- {name: 🍎 Apple, type: select, proxies: [直连, 🚀 默认代理]}
  - {name: 🎯 直连, type: select, proxies: [直连, 🚀 默认代理]}
  - {name: 🐟 漏网之鱼, <<: *pr}
  - {name: 🇭🇰 香港节点, type: select, include-all: true, filter: "(?i)港|hk|hongkong|hong kong"}
  - {name: 🇯🇵 日本节点, type: select, include-all: true, filter: "(?i)日本|川日|东京|大阪|泉日|埼玉|沪日|深日|JP|Japan"}
  - {name: 🇺🇲 美国节点, type: select, include-all: true, filter: "(?i)美|波特兰|达拉斯|俄勒冈|凤凰城|费利蒙|硅谷|拉斯维加斯|洛杉矶|圣何塞|圣克拉拉|西雅图|芝加哥|US|United States"}
  - {name: ♿ 台湾节点, type: select, include-all: true, filter: "(?i)台|tw|taiwan|新北"}
  - {name: 🛂 狮城节点, type: select, include-all: true, filter: "(?i)新加坡|坡|狮城|SG|Singapore"}
  - {name: ⚛️ 其他节点, type: select, include-all: true, filter: "(?i)大|西|印|尼|非|韩|德|法|英|俄|AR|ZA|IL|TR|KR|CA|CL|BR|ES|SA|SE|AE|MX|CH|GB|TH|AU|MY"}
  - {name: 🔯 香港故转, type: fallback, include-all: true, tolerance: 20, interval: 120, filter: "(?=.*(港|HK|(?i)Hong))^((?!(台|日|韩|新|深|美)).)*$"}
  - {name: 🔯 日本故转, type: fallback, include-all: true, tolerance: 20, interval: 120, filter: "(?=.*(日|JP|(?i)Japan))^((?!(港|台|韩|新|美)).)*$" }
  - {name: ♻️ 香港自动, type: url-test, include-all: true, tolerance: 20, interval: 120, filter: "(?=.*(港|HK|(?i)Hong))^((?!(台|日|韩|新|深|美)).)*$"}
  - {name: ♻️ 日本自动, type: url-test, include-all: true, tolerance: 20, interval: 120, filter: "(?=.*(日|JP|(?i)Japan))^((?!(港|台|韩|新|美)).)*$" }
  - {name: ♻️ 其他自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(美|US|AR|ZA|IL|TR|KR|CA|CL|BR|ES|SA|SE|AE|MX|CH|GB|TH|AU|MY|(?i)大|西|印|尼|非|韩|德|法|英|俄|States|America))^((?!(港|日|)).)*$"}
  - {name: ♻️ 自动选择, type: url-test, include-all: true, tolerance: 20, interval: 200, filter: "^((?!(直连)).)*$"}
  - {name: 🌐 全部节点, type: select, include-all: true}

# 规则匹配
# 此规则部分没有做防泄露处理，因为弊严重大于利！
rules:
  - DOMAIN-SUFFIX,fimfiction.com,🚀 默认代理
  - RULE-SET,private_domain,直连
 #- RULE-SET,apple_domain,🍎 Apple
  - RULE-SET,proxylite,🚀 默认代理
  - RULE-SET,ai,🤖 ChatGPT
  - RULE-SET,github_domain,👨🏿‍💻 GitHub
  - RULE-SET,youtube_domain,📹 YouTube
  - RULE-SET,bilibili_domain,📕 Bilibili
  - RULE-SET,pixiv_domain,📗 Pixiv
  - RULE-SET,spotify_domain,📘 Spotify
  - RULE-SET,twitter_domain,📙 X
  - RULE-SET,nocnanything,🚀 默认代理
  - RULE-SET,cnsomething🎯 直连
  - RULE-SET,google_domain,🍀 Google
  - RULE-SET,onedrive_domain,🐬 OneDrive
  - RULE-SET,microsoft_domain,🪟 Microsoft
 #- RULE-SET,tiktok_domain,🎵 TikTok
  - RULE-SET,speedtest_domain,✈️ Speedtest
  - RULE-SET,telegram_domain,📲 Telegram
 #- RULE-SET,netflix_domain,🎥 NETFLIX
 #- RULE-SET,paypal_domain,💶 PayPal
  - RULE-SET,gfw_domain,🚀 默认代理
  - RULE-SET,geolocation-!cn,🚀 默认代理
  - RULE-SET,cn_domain,🎯 直连
  - RULE-SET,google_ip,🍀 Google,no-resolve
 #- RULE-SET,netflix_ip,🎥 NETFLIX,no-resolve
  - RULE-SET,telegram_ip,📲 Telegram,no-resolve
  - RULE-SET,cn_ip,🎯 直连
  - MATCH,🐟 漏网之鱼

# 规则集
rule-anchor:
  ip: &ip {type: http, interval: 86400, behavior: ipcidr, format: mrs}
  domain: &domain {type: http, interval: 86400, behavior: domain, format: mrs}
  class: &class {type: http, interval: 86400, behavior: classical, format: text}
rule-providers: 
  private_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs"}
  proxylite: { <<: *class, url: "https://raw.githubusercontent.com/qichiyuhub/rule/refs/heads/master/ProxyLite.list"}
  nocnanything: { <<: *class, url: "https://raw.githubusercontent.com/lxhn-jpg/clash-rule-lxh/refs/heads/main/anything!cn.list"}
  cnsomething: { <<: *class, url: "https://raw.githubusercontent.com/lxhn-jpg/clash-rule-lxh/refs/heads/main/cnsomething.list"}
  ai: {  <<: *domain, url: "https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/category-ai-chat-!cn.mrs" }
  youtube_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs"}
  google_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.mrs"}
  github_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.mrs"}
  telegram_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.mrs"}
  netflix_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/netflix.mrs"}
  paypal_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/paypal.mrs"}
  onedrive_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/onedrive.mrs"}
  microsoft_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/microsoft.mrs"}
  apple_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/apple-cn.mrs"}
  speedtest_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/ookla-speedtest.mrs"}
  tiktok_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/tiktok.mrs"}
  bilibili_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/bilibili.mrs"}
  pixiv_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/pixiv.mrs"}
  spotify_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/spotify.mrs"}
  twitter_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/twitter.mrs"}
  gfw_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/gfw.mrs"}
  geolocation-!cn: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.mrs"}
  cn_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.mrs"}
  
  cn_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.mrs"}
  google_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.mrs"}
  telegram_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/telegram.mrs"}
  netflix_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/netflix.mrs"}
